package ChatServer;

import javax.crypto.KeyAgreement;
import java.security.*;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;

/**
 * Handles the server side of a Diffie-Hellman key-exchange.
 *
 * @author beej15
 * Created on 4/11/18
 */
public class DHKeyGen {
    private final   String              ALGORITHM = "DH";
    private final   int                 keySize = 2048;
    private         byte[]              alicePubKeyEnc;
    private         byte[]              sharedSecret;
    private         KeyAgreement        aliceKeyAgree;
    private         int                 aliceLen;

    /**
     * Creates a unique object of a Diffie-Hellman key exchange for each client connected.
     * @throws  KeyGenException KeyGen exceptions. As we only use hardcoded parameters for the algorithms, the only problem would be a network-related one.
     */
    public DHKeyGen() throws KeyGenException {
        this.alicePubKeyEnc = aliceKeyGen();
    }

    /**
     * Creates a keypair with a kesize of 2048 bits, then using the newly generated private key, we initializes a Diffie-Hellman agreement
     * The public key can then be sent off to the client to do the same.
     * @return alicePubKeyEnc encoded public key.
     * @throws KeyGenException KeyGen exceptions. None of the exceptions should be thrown as this is a simple key exchange
     */
    private byte[] aliceKeyGen() throws KeyGenException {
        try {
            final KeyPairGenerator aliceKeyPairGen = KeyPairGenerator.getInstance(ALGORITHM);
            aliceKeyPairGen.initialize(keySize);
            final KeyPair aliceKeyPair = aliceKeyPairGen.generateKeyPair();

            aliceKeyAgree = KeyAgreement.getInstance(ALGORITHM);
            aliceKeyAgree.init(aliceKeyPair.getPrivate());

            alicePubKeyEnc = aliceKeyPair.getPublic().getEncoded();

            return alicePubKeyEnc;
        } catch (Exception e) {
            throw new KeyGenException("Error when generating key.");
        }
    }

    /**
     * Instantiates a Diffie-Hellman publicKey object of the client's public key.
     * and uses the client's public key for the first and only time.
     * The server can now generate the secret.
     * @param bobPubKeyEnc client's public Diffie-Hellman key.
     * @throws InvalidKeyException,InvalidKeySpecException,NoSuchAlgorithmException
     * java.security exceptions. Since DH is hardcoded, NSAE will never be thrown.
     * InvalidKey(Spec)Exception will only be thrown if the public key is wrong which could happen
     * if the data transferred is lost, then, proper Exceptions must be thrown.
     */
    public void doPhase(byte[] bobPubKeyEnc) throws InvalidKeyException,
                                                    InvalidKeySpecException,
                                                    NoSuchAlgorithmException {
        final KeyFactory aliceKeyFac = KeyFactory.getInstance(ALGORITHM);
        final X509EncodedKeySpec keySpec = new X509EncodedKeySpec(bobPubKeyEnc);
        final PublicKey bobPubKey = aliceKeyFac.generatePublic(keySpec);
        aliceKeyAgree.doPhase(bobPubKey, true);
    }

    /**
     * Keyagreement between two parties - server and client.
     * Generates a shared secret that can be generated by the client aswell
     * @return sharedSecret Shared Diffie-Hellman secret between the client and server
     */
    private byte[] generateSecret() {
        sharedSecret = aliceKeyAgree.generateSecret();
        aliceLen = sharedSecret.length;
        return sharedSecret;
    }

    /**
     * Returns the server's public Diffie-Hellman key.
     * @return Diffie-Hellman key
     */
    public byte[] getAlicePubKeyEnc() {
        return alicePubKeyEnc;
    }

    /**
     * Returns the Diffie-Hellman secret as a hexadecimal String
     * @return hexadecimal string of the Diffie-Hellman secret.
     */
    public String getSecretHex() {
        return bytesToHex(generateSecret());
    }

    /**
     * Used to generate the same Diffie-hellman secret in client.
     * @return length of the shared Diffie-Hellman secret between client and server.
     */
    public int getAliceLen() {
        return aliceLen;
    }


    /**
     * Returns a hex value from a byte[].
     * @param bytes byte[] to convert.
     * @return hexadecimal value of byte[]
     */
    private static String bytesToHex(byte[] bytes) {
        char[] hexArray = "0123456789ABCDEF".toCharArray();
        char[] hexChars = new char[bytes.length * 2];
        for (int j = 0; j < bytes.length; j++) {
            int v = bytes[j] & 0xFF;
            hexChars[j * 2] = hexArray[v >>> 4];
            hexChars[j * 2 + 1] = hexArray[v & 0x0F];
        }
        return new String(hexChars);
    }
}
